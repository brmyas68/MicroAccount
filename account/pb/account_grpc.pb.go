// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	InsertAccount(ctx context.Context, in *RequestAccount, opts ...grpc.CallOption) (*ResponseAccount, error)
	GetUserAccounts(ctx context.Context, in *RequestUserAccount, opts ...grpc.CallOption) (AccountService_GetUserAccountsClient, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) InsertAccount(ctx context.Context, in *RequestAccount, opts ...grpc.CallOption) (*ResponseAccount, error) {
	out := new(ResponseAccount)
	err := c.cc.Invoke(ctx, "/AccountService/InsertAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetUserAccounts(ctx context.Context, in *RequestUserAccount, opts ...grpc.CallOption) (AccountService_GetUserAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[0], "/AccountService/GetUserAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceGetUserAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_GetUserAccountsClient interface {
	Recv() (*ResponseUserAccounts, error)
	grpc.ClientStream
}

type accountServiceGetUserAccountsClient struct {
	grpc.ClientStream
}

func (x *accountServiceGetUserAccountsClient) Recv() (*ResponseUserAccounts, error) {
	m := new(ResponseUserAccounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	InsertAccount(context.Context, *RequestAccount) (*ResponseAccount, error)
	GetUserAccounts(*RequestUserAccount, AccountService_GetUserAccountsServer) error
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) InsertAccount(context.Context, *RequestAccount) (*ResponseAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetUserAccounts(*RequestUserAccount, AccountService_GetUserAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserAccounts not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_InsertAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).InsertAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountService/InsertAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).InsertAccount(ctx, req.(*RequestAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetUserAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestUserAccount)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).GetUserAccounts(m, &accountServiceGetUserAccountsServer{stream})
}

type AccountService_GetUserAccountsServer interface {
	Send(*ResponseUserAccounts) error
	grpc.ServerStream
}

type accountServiceGetUserAccountsServer struct {
	grpc.ServerStream
}

func (x *accountServiceGetUserAccountsServer) Send(m *ResponseUserAccounts) error {
	return x.ServerStream.SendMsg(m)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertAccount",
			Handler:    _AccountService_InsertAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserAccounts",
			Handler:       _AccountService_GetUserAccounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/account.proto",
}
